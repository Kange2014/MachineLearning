length(data[x])
x
data[x]
missing values
data==NA
data
data[x[1,],1]
x[1,]
data[x[,1],1]
data[x[,2],2]
?complete.elements
?complete.element
??complete.element
mean(data)
y<-data$Ozone
z <- is.na(y)
y[!z]
mean(y[!z])
data[data$Ozone>31&data$Temp>90]
data[data$Ozone>31&data$Temp>90,]
y <- data[data$Ozone>31&data$Temp>90,]
mean(y$S)
y$S
z<-is.na(y$S)
z
y$S[!z]
mean(y$S[!z])
data[data$Month==6,]
data[data$Month==6,]$Temp
mean(data[data$Month==6,]$Temp)
data[data$Month==5,]$Ozone
max(data[data$Month==5,]$Ozone)
y<-data[data$Month==5,]$Ozone
y[!is.na(y)]
max(y[!is.na(y)])
x<-is.na(data)
data(x)
data[x]
data[!x]
data[!x,]
x
x[1,]
x[,1]
data[x[,1],]
y<-data[,1]
y
y[x[,1]]
y[!x[,1]]
data[,2][x[,2]
]
data[,3][x[,3]]
data[,4][x[,4]]
data[,5][x[,5]]
x <- c(4, "a", TRUE)
x
data[1:2,]
data[152:153,]
data$Ozone[47]
x<-data$Ozone
x[is.na(x)]
mean(x[!is.na(x)])
data[data$Ozone>31&data$Temp>90,]
y<-data[data$Ozone>31&data$Temp>90,]$S
y
mean(y[!is.na(y)])
y<-data[data$Month==6,]
y$Temp
mean(y$Temp)
data[data$Month==5]$Ozone
data[data$Month==5,]$Ozone
seq_len(2)
seq_len(3)
seq_len(10)
x<-seq_len(10)
seq_along(x)
x<-c("a","b","c")
seq_along(x)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
library(datasets)
data(iris)
?iris
iris$Sepal.Length
iris
mean(iris$Sepal.Length[which(iris$Species == "virginica")])
which(iris$Species == "virginica")
data(mtcars)
apply(iris[, 1:4], 2, mean)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
debug(ls)
ls
debug(lm)
lm(y~x)
bye
q
q()
debug(ls)
ls
?
with
library(swirl)
swirl()
5 + 7
x <-  5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
nxt()
?list.files()
?list.files
args(list.files)
old.dir <- getwd()
?mkdir
??mkdir
dir.creat("testdir")
?dir.create
dir.create("testdir")
setwd("testdir")
?file.create
file.create("mytest.R")
list.files()
file.exists("mytest.R")
?more
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
getwd()
file.path("mytest3.R")
dir.create("testdir2/testdir3")
dir.create("testdir2/testdir3",recursive=TRUE)
unlink("testdir2",recursive=TRUE)
setwd("old.dir")
setwd(old.dir)
unlink("testdir")
unlink("testdir",recursive=TRUE)
5 + 7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
swirl()
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix <- matrix(1:20,nrow=4,ncol=5)
my_matrix2 <- matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class("my_data")
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 !=8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shapge_class)
class(shape_class)
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
library(swirl)
swirl()
ls()
class("plants")
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.szie(plants)
object.size(plants)
names(plants)
head(plnats)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),replacement=TRUE,prob=c(0.3,0.7))
flips <- sample(c(0,1),replace=TRUE,prob=c(0.3,0.7))
flips <- sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flip2 <- rbinom(1,size=100,prob=0.7)
flip2 <- rbinom(n=100,size=1,prob=0.7)
flips2 <- rbinom(n=100,size=1,prob=0.7)
flips2
sum(flips)
sum(flips2)
?rnorm
rnomr(10)
rnorm(10)
rnorm(10,mean=100,sd=25)
?rpois
rpois(5,lamba=10)
rpois(5,lambda=10)
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMean(my_pois)
cm <- colMeans(my_pois)
hist(cm)
dl <- Sys.Date()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(t1)
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(),t1,units="days")
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(cars)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab=""stooping Distance)
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab=""stooping Distance"")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab="stooping Distance"")
)
""
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab="Stooping Distance")
plot(x = cars$speed, y = cars$dist,ylab="Stooping Distance")
plot(x = cars$speed, y = cars$dist,ylab="Stoping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab = "Stoping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab = "Stopping Distance")
plot(cars,main="My Plot")
plot(cars,main="My Plot",sub="My Plot Subtitle")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2
)
data(mtcars)
?boxplot
boxplot(mpg~cyl,data=mtcars)
hist(mtcars$mpg)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
inTrain
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
mixtures
mixtures[1,]
mixtures[2,]
mixtures[[1]]
training
training[1,]
training[2,]
qplot(CompressiveStrength,1:1016,color=Cement,data=training)
qplot(training$CompressiveStrength,1:1016,color=Cement)
qplot(training$CompressiveStrength,1:1016,color=training$Cement)
dim(training)
qplot(CompressiveStrength,774,color=Cement,data=training)
training[1,]
training[1,][1]
qplot(CompressiveStrength,1:774,color=Cement,data=training)
training$rownames
training$row
?training
View(training)
training$row.names
training$Cement
training$row.names
training$rownames
inTrain
qplot(CompressiveStrength,inTrain,color=Cement,data=training)
qplot(CompressiveStrength,inTrain,color=BlastFurnaceSlag,data=training)
qplot(CompressiveStrength,inTrain,color=FlyAsh,data=training)
qplot(CompressiveStrength,inTrain,color=Water,data=training)
qplot(CompressiveStrength,inTrain,color=Age,data=training)
qplot(CompressiveStrength,inTrain,color=Superplasticizer,data=training)
qplot(CompressiveStrength,inTrain,color=FineAggregate,data=training)
qplot(inTrain,CompressiveStrength,color=FineAggregate,data=training)
qplot(inTrain,CompressiveStrength,color=Age,data=training)
qplot(inTrain,CompressiveStrength,color=FlyAsh,data=training)
qplot(inTrain,CompressiveStrength,color=Water,data=training)
qplot(inTrain,CompressiveStrength,color=Cement,data=training)
hist(SuperPlasticizer,data=training)
hist(training$SuperPlasticizer)
training$SuperPlasticizer
training$Cement
training$Superplasticizer
hist(training$Superplasticizer)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
traininig[1,]
training[1,]
training$IL.
training$IL_
training$IL_..
training$IL。
training$IL。.
training$IL.
training$IL[.]
training$I
training$I
training$IL
View(training)
training$ACE
training$IL_11
(a,b) <- dim(training)
a <- dim(training)
a
??seq
?seqalong
??seqalong
?seq_along
seq_along(a)
which(colnames(training))
which(colnames(training) == "IL_11")
which(colnames(training) == "IL_8")
?preProcess
preProc <- preProcess(training[,58:69])
preProc
preProc <- preProcess(training[,58:69],method="pca")
preProc
preProc$rotation
preProc <- preProcess(training[,58:69],method="pca",thresh=0.85)
preProc$rotation
preProc <- preProcess(training[,58:69],method="pca",thresh=0.8)
preProc$rotation
preProc
train <- predict(diagnosis,training[,58:69],data=training)
train <- predict(preProc,training[,58:69])
?predict
modelfit <- train(training$diagnosis ~.,method = "glm",data = train)
?glm
install.packages("e1071")
modelfit <- train(training$diagnosis ~.,method = "glm",data = train)
modelfit
train
modelfit
modelfit2 <- train(diagnosis ~., data <- training[,c(1,58:69)],method="glm")
modelfit2
prections <- predict(modelfit2,newdata=testing)
confusionMatrix(predictions,testing$disgnosis)
confusionMatrix(prections,testing$disgnosis)
predictions <- predict(modelfit2,newdata=testing[,c(1,58:69)])
confusionMatrix(prections,testing$disgnosis)
confusionMatrix(prections,testing$diagnosis)
testPC <- predict(preProc,testing(,58:69))
testPC <- predict(preProc,testing[,58:69])
confusionMatrix(testing$diagnosis,predict(modelfit,testPC))
preProc <- preProcess(training[,58:69],method="pca",thresh=0.9)
preProc
trainPC <- predict(preProc,training[,58:69])
modelfit <- train(training$diagnosis ~., method = "glm",data=trainPC)
modelfit
?train
?setpwd
??setpwd
?setwd
setwd("/Users/kange2014/Coursera/Machine_Learning")
training <- read.csv("pml-training.csv")
training[1,]
